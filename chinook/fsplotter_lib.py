# -*- coding: utf-8 -*-
"""
Created on Mon Jan 10 11:31:20 2022

@author: Andrew
"""
import numpy as np

def get_kpoints_from_spaghettiene(case):
    '''
    Function to extract kpoints from case.spaghetti_ene file. Does this by
    going through the file until it reaches the second band, whilst extracting
    the kvalues
    '''
    
    kpoints = []
    kpoints_linear = []
    
    print('get_kpoints_from_spaghettiene: Opening ' + case + '.spaghetti_ene')
    
    f = open(case + '.spaghetti_ene','r')
    
    nband = 0
    for line in f: # will go through the first set of lines initially, getting the k values
        if 'bandindex' in line:
            nband += 1
            if nband > 1: # if we've been through the first band entirely, break from the loop
                break
        else:
            vals = [v for v in line.split(' ') if v] # splits line, removes whitespace
            kx = float(vals[0])
            ky = float(vals[1])
            kz = float(vals[2])
            
            kpoints.append([kx,ky,kz]) # are already given in absolute units!
            kpoints_linear.append(float(vals[3]))
    
    f.close()
    print('get_kpoints_from_spaghettiene: Closing {}.spaghetti_ene'.format(case))

    # formats the arrays into numpy arrays
    kpoints = np.array(kpoints)
    kpoints_linear = np.array(kpoints_linear)

    return kpoints,kpoints_linear




def get_bands_from_spaghettiene(case):
    '''
    Function to extract bands from case.spaghetti_ene file and return them in
    the appropriate unmpy array format
    '''
    
    bands = []
    numbands = 0

    print('get_bands_from_spaghettiene: Opening {}.spaghetti_ene'.format(case))
    f = open('{}.spaghetti_ene'.format(case),'r') # opens the file for reading
    
    bandE = []
    for line in f: # loops through all the lines in the file
    
        if 'bandindex' in line or not line: # implies we've reached a new band, or end of file
            numbands += 1
            # need to append current band data onto the bands data structure
            if bandE != []: # as long as the current band isn't empty (i.e. upon initialisation)
                bands.append(bandE)
                bandE = []
                
        else: # if the line simply has numbers, etc
            energies = [e for e in line.split(' ') if e] # removes all empty strings from list, incase line has weird spacings
            bandE.append(float(energies[4])) # returning the float strips the trailing \n
            
    f.close() # closes the spaghettiene file to avoid file corruption
    print('get_bands_from_spaghettiene: Closing {}.spaghetti_ene'.format(case))
    
    # we add 1 to the number of bands at the end of the file, so we subtract it here
    numbands = numbands - 1
    
    # converts bands, kpoints, to numpy arrays
    bands = np.transpose(np.array(bands))
    
    return bands,numbands




def get_labels_from_klist(case):
    '''
    Function to get the labels and cut points from the case.klist_band file.
    Returns the text labels and the linenumbers of the breaks (changes in direction)
    '''
    
    labels = []
    kpoints_brk_line = []
    numline = -1
    
    print('get_labels_from_klist: Opening {}.klist_band'.format(case))
    f = open('{}.klist_band'.format(case),'r')
    
    for line in f:
        numline += 1
        if line[0] != ' ': #if the line starts with characters, indicating a special point
            line = [e for e in line.split(' ') if e] # splits the line and removes whitespace
            if 'END' not in line[0]:
                labels.append(line[0])
                kpoints_brk_line.append(numline)
    
    f.close()
    print('get_labels_from_klist: Closing {}.klist_band'.format(case))

    return labels,kpoints_brk_line



def change_kobject_TB(case,kobj,TB):
    '''
    A function to change a TB object and a kobject to allow us to load in our 
    own data generated by WIEN2K. 
    '''
    # uses the above functions to load in the kpoints, labels, etc
    kpoints,kpoints_linear = get_kpoints_from_spaghettiene(case)
    labels,kpoints_brk_line = get_labels_from_klist(case)
    
    
    # updates the kobject
    kobj.kpts = kpoints
    kobj.kcut = kpoints_linear
    kobj.kcut_brk = kpoints_linear[kpoints_brk_line]
    kobj.labels = labels
    
    TB.Kobj = kobj
    
    # uses the functions above to load in the bands and put them into the TB object
    bands,numbands = get_bands_from_spaghettiene(case)
    TB.Eband = bands  
    # need to change the TB.basis object to have a length of numbands
    #print(TB.basis)
    TB.basis = [ii for ii in range(numbands)]
    
    return kobj,TB
    
    